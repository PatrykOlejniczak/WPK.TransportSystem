//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManagingSystem.NewsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="News", Namespace="Wpk.Entities")]
    [System.SerializableAttribute()]
    public partial class News : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewsService.INewsSecureService")]
    public interface INewsSecureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/GetByEmployeeId", ReplyAction="http://tempuri.org/INewsSecureService/GetByEmployeeIdResponse")]
        ManagingSystem.NewsService.News[] GetByEmployeeId(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/GetByEmployeeId", ReplyAction="http://tempuri.org/INewsSecureService/GetByEmployeeIdResponse")]
        System.Threading.Tasks.Task<ManagingSystem.NewsService.News[]> GetByEmployeeIdAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/Create", ReplyAction="http://tempuri.org/INewsSecureService/CreateResponse")]
        void Create(ManagingSystem.NewsService.News news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/Create", ReplyAction="http://tempuri.org/INewsSecureService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(ManagingSystem.NewsService.News news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/Update", ReplyAction="http://tempuri.org/INewsSecureService/UpdateResponse")]
        void Update(ManagingSystem.NewsService.News news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/Update", ReplyAction="http://tempuri.org/INewsSecureService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(ManagingSystem.NewsService.News news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/DeleteById", ReplyAction="http://tempuri.org/INewsSecureService/DeleteByIdResponse")]
        void DeleteById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsSecureService/DeleteById", ReplyAction="http://tempuri.org/INewsSecureService/DeleteByIdResponse")]
        System.Threading.Tasks.Task DeleteByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewsSecureServiceChannel : ManagingSystem.NewsService.INewsSecureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewsSecureServiceClient : System.ServiceModel.ClientBase<ManagingSystem.NewsService.INewsSecureService>, ManagingSystem.NewsService.INewsSecureService {
        
        public NewsSecureServiceClient() {
        }
        
        public NewsSecureServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewsSecureServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsSecureServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsSecureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ManagingSystem.NewsService.News[] GetByEmployeeId(int employeeId) {
            return base.Channel.GetByEmployeeId(employeeId);
        }
        
        public System.Threading.Tasks.Task<ManagingSystem.NewsService.News[]> GetByEmployeeIdAsync(int employeeId) {
            return base.Channel.GetByEmployeeIdAsync(employeeId);
        }
        
        public void Create(ManagingSystem.NewsService.News news) {
            base.Channel.Create(news);
        }
        
        public System.Threading.Tasks.Task CreateAsync(ManagingSystem.NewsService.News news) {
            return base.Channel.CreateAsync(news);
        }
        
        public void Update(ManagingSystem.NewsService.News news) {
            base.Channel.Update(news);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(ManagingSystem.NewsService.News news) {
            return base.Channel.UpdateAsync(news);
        }
        
        public void DeleteById(int id) {
            base.Channel.DeleteById(id);
        }
        
        public System.Threading.Tasks.Task DeleteByIdAsync(int id) {
            return base.Channel.DeleteByIdAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewsService.INewsService")]
    public interface INewsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAll", ReplyAction="http://tempuri.org/INewsService/GetAllResponse")]
        ManagingSystem.NewsService.News[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetAll", ReplyAction="http://tempuri.org/INewsService/GetAllResponse")]
        System.Threading.Tasks.Task<ManagingSystem.NewsService.News[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetById", ReplyAction="http://tempuri.org/INewsService/GetByIdResponse")]
        ManagingSystem.NewsService.News GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetById", ReplyAction="http://tempuri.org/INewsService/GetByIdResponse")]
        System.Threading.Tasks.Task<ManagingSystem.NewsService.News> GetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewsServiceChannel : ManagingSystem.NewsService.INewsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewsServiceClient : System.ServiceModel.ClientBase<ManagingSystem.NewsService.INewsService>, ManagingSystem.NewsService.INewsService {
        
        public NewsServiceClient() {
        }
        
        public NewsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ManagingSystem.NewsService.News[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<ManagingSystem.NewsService.News[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public ManagingSystem.NewsService.News GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<ManagingSystem.NewsService.News> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
    }
}
