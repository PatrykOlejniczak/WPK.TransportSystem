//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace Mobile.Helper.Services.TimetableService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Timetable", Namespace="Wpk.Entities")]
    public partial class Timetable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BusStopOnLineIdField;
        
        private System.TimeSpan DepartureTimeField;
        
        private System.Nullable<int> IdField;
        
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BusStopOnLineId {
            get {
                return this.BusStopOnLineIdField;
            }
            set {
                if ((this.BusStopOnLineIdField.Equals(value) != true)) {
                    this.BusStopOnLineIdField = value;
                    this.RaisePropertyChanged("BusStopOnLineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimetableService.ITimetableSecureService")]
    public interface ITimetableSecureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableSecureService/GetAllWithDeleted", ReplyAction="http://tempuri.org/ITimetableSecureService/GetAllWithDeletedResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TimetableService.Timetable>> GetAllWithDeletedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableSecureService/Create", ReplyAction="http://tempuri.org/ITimetableSecureService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(Mobile.Helper.Services.TimetableService.Timetable timetable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableSecureService/Update", ReplyAction="http://tempuri.org/ITimetableSecureService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Mobile.Helper.Services.TimetableService.Timetable timetable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableSecureService/DeleteById", ReplyAction="http://tempuri.org/ITimetableSecureService/DeleteByIdResponse")]
        System.Threading.Tasks.Task DeleteByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableSecureService/UndeleteById", ReplyAction="http://tempuri.org/ITimetableSecureService/UndeleteByIdResponse")]
        System.Threading.Tasks.Task UndeleteByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimetableSecureServiceChannel : Mobile.Helper.Services.TimetableService.ITimetableSecureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimetableSecureServiceClient : System.ServiceModel.ClientBase<Mobile.Helper.Services.TimetableService.ITimetableSecureService>, Mobile.Helper.Services.TimetableService.ITimetableSecureService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TimetableSecureServiceClient() : 
                base(TimetableSecureServiceClient.GetDefaultBinding(), TimetableSecureServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITimetableSecureService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableSecureServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TimetableSecureServiceClient.GetBindingForEndpoint(endpointConfiguration), TimetableSecureServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableSecureServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TimetableSecureServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableSecureServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TimetableSecureServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableSecureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TimetableService.Timetable>> GetAllWithDeletedAsync() {
            return base.Channel.GetAllWithDeletedAsync();
        }
        
        public System.Threading.Tasks.Task CreateAsync(Mobile.Helper.Services.TimetableService.Timetable timetable) {
            return base.Channel.CreateAsync(timetable);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Mobile.Helper.Services.TimetableService.Timetable timetable) {
            return base.Channel.UpdateAsync(timetable);
        }
        
        public System.Threading.Tasks.Task DeleteByIdAsync(int id) {
            return base.Channel.DeleteByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task UndeleteByIdAsync(int id) {
            return base.Channel.UndeleteByIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITimetableSecureService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITimetableSecureService)) {
                return new System.ServiceModel.EndpointAddress("https://localhost:44300/Services/TimetableService.svc/secure");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TimetableSecureServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITimetableSecureService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TimetableSecureServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITimetableSecureService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITimetableSecureService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimetableService.ITimetableService")]
    public interface ITimetableService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableService/GetAll", ReplyAction="http://tempuri.org/ITimetableService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TimetableService.Timetable>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimetableService/GetById", ReplyAction="http://tempuri.org/ITimetableService/GetByIdResponse")]
        System.Threading.Tasks.Task<Mobile.Helper.Services.TimetableService.Timetable> GetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimetableServiceChannel : Mobile.Helper.Services.TimetableService.ITimetableService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimetableServiceClient : System.ServiceModel.ClientBase<Mobile.Helper.Services.TimetableService.ITimetableService>, Mobile.Helper.Services.TimetableService.ITimetableService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TimetableServiceClient() : 
                base(TimetableServiceClient.GetDefaultBinding(), TimetableServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITimetableService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TimetableServiceClient.GetBindingForEndpoint(endpointConfiguration), TimetableServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TimetableServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TimetableServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TimetableServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TimetableService.Timetable>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<Mobile.Helper.Services.TimetableService.Timetable> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITimetableService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITimetableService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:24462/Services/TimetableService.svc/basicHttp");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TimetableServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITimetableService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TimetableServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITimetableService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITimetableService,
        }
    }
}
