//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace Mobile.Helper.Services.TicketService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="Wpk.Entities")]
    public partial class Ticket : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.TimeSpan DurationField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        private double PriceField;
        
        private int TicketTypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketTypeId {
            get {
                return this.TicketTypeIdField;
            }
            set {
                if ((this.TicketTypeIdField.Equals(value) != true)) {
                    this.TicketTypeIdField = value;
                    this.RaisePropertyChanged("TicketTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketService.ITicketService")]
    public interface ITicketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAll", ReplyAction="http://tempuri.org/ITicketService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetWherePriceMoreThan", ReplyAction="http://tempuri.org/ITicketService/GetWherePriceMoreThanResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWherePriceMoreThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetWherePriceLessThan", ReplyAction="http://tempuri.org/ITicketService/GetWherePriceLessThanResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWherePriceLessThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetWhereTicketTypeId", ReplyAction="http://tempuri.org/ITicketService/GetWhereTicketTypeIdResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWhereTicketTypeIdAsync(int ticketTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetById", ReplyAction="http://tempuri.org/ITicketService/GetByIdResponse")]
        System.Threading.Tasks.Task<Mobile.Helper.Services.TicketService.Ticket> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetByName", ReplyAction="http://tempuri.org/ITicketService/GetByNameResponse")]
        System.Threading.Tasks.Task<Mobile.Helper.Services.TicketService.Ticket> GetByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketServiceChannel : Mobile.Helper.Services.TicketService.ITicketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketServiceClient : System.ServiceModel.ClientBase<Mobile.Helper.Services.TicketService.ITicketService>, Mobile.Helper.Services.TicketService.ITicketService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TicketServiceClient() : 
                base(TicketServiceClient.GetDefaultBinding(), TicketServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITicketService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TicketServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TicketServiceClient.GetBindingForEndpoint(endpointConfiguration), TicketServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TicketServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TicketServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TicketServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TicketServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TicketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWherePriceMoreThanAsync(double price) {
            return base.Channel.GetWherePriceMoreThanAsync(price);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWherePriceLessThanAsync(double price) {
            return base.Channel.GetWherePriceLessThanAsync(price);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.TicketService.Ticket>> GetWhereTicketTypeIdAsync(int ticketTypeId) {
            return base.Channel.GetWhereTicketTypeIdAsync(ticketTypeId);
        }
        
        public System.Threading.Tasks.Task<Mobile.Helper.Services.TicketService.Ticket> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<Mobile.Helper.Services.TicketService.Ticket> GetByNameAsync(string name) {
            return base.Channel.GetByNameAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITicketService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITicketService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:24462/Services/TicketService.svc/basicHttp");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TicketServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITicketService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TicketServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITicketService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITicketService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketService.ITicketSecureService")]
    public interface ITicketSecureService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketSecureService/Create", ReplyAction="http://tempuri.org/ITicketSecureService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(Mobile.Helper.Services.TicketService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketSecureService/Update", ReplyAction="http://tempuri.org/ITicketSecureService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Mobile.Helper.Services.TicketService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketSecureService/DeleteById", ReplyAction="http://tempuri.org/ITicketSecureService/DeleteByIdResponse")]
        System.Threading.Tasks.Task DeleteByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketSecureServiceChannel : Mobile.Helper.Services.TicketService.ITicketSecureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketSecureServiceClient : System.ServiceModel.ClientBase<Mobile.Helper.Services.TicketService.ITicketSecureService>, Mobile.Helper.Services.TicketService.ITicketSecureService {
        
        public TicketSecureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task CreateAsync(Mobile.Helper.Services.TicketService.Ticket ticket) {
            return base.Channel.CreateAsync(ticket);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Mobile.Helper.Services.TicketService.Ticket ticket) {
            return base.Channel.UpdateAsync(ticket);
        }
        
        public System.Threading.Tasks.Task DeleteByIdAsync(int id) {
            return base.Channel.DeleteByIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    }
}
