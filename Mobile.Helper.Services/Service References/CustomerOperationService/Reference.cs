//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace Mobile.Helper.Services.CustomerOperationService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoostAccount", Namespace="Wpk.Entities")]
    public partial class BoostAccount : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountField;
        
        private string CodeField;
        
        private System.Nullable<int> CustomerIdField;
        
        private System.Nullable<System.DateTime> DateOfBoostField;
        
        private System.DateTime GeneratedDateTimeField;
        
        private System.Nullable<int> IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateOfBoost {
            get {
                return this.DateOfBoostField;
            }
            set {
                if ((this.DateOfBoostField.Equals(value) != true)) {
                    this.DateOfBoostField = value;
                    this.RaisePropertyChanged("DateOfBoost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime GeneratedDateTime {
            get {
                return this.GeneratedDateTimeField;
            }
            set {
                if ((this.GeneratedDateTimeField.Equals(value) != true)) {
                    this.GeneratedDateTimeField = value;
                    this.RaisePropertyChanged("GeneratedDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpandedPurchaseTicket", Namespace="Wpk.Entities")]
    public partial class ExpandedPurchaseTicket : Mobile.Helper.Services.CustomerOperationService.PurchaseTicket {
        
        private string TicketNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketName {
            get {
                return this.TicketNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketNameField, value) != true)) {
                    this.TicketNameField = value;
                    this.RaisePropertyChanged("TicketName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PurchaseTicket", Namespace="Wpk.Entities")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Mobile.Helper.Services.CustomerOperationService.ExpandedPurchaseTicket))]
    public partial class PurchaseTicket : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CustomerIdField;
        
        private System.DateTime DateOfPurchaseField;
        
        private string DeviceIdField;
        
        private System.Nullable<int> DiscountIdField;
        
        private string DocumentIdentificationNumberField;
        
        private string FirstNameTicketOwnerField;
        
        private System.Nullable<int> IdField;
        
        private string LastNameTicketOwnerField;
        
        private int TicketIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfPurchase {
            get {
                return this.DateOfPurchaseField;
            }
            set {
                if ((this.DateOfPurchaseField.Equals(value) != true)) {
                    this.DateOfPurchaseField = value;
                    this.RaisePropertyChanged("DateOfPurchase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DiscountId {
            get {
                return this.DiscountIdField;
            }
            set {
                if ((this.DiscountIdField.Equals(value) != true)) {
                    this.DiscountIdField = value;
                    this.RaisePropertyChanged("DiscountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentIdentificationNumber {
            get {
                return this.DocumentIdentificationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentIdentificationNumberField, value) != true)) {
                    this.DocumentIdentificationNumberField = value;
                    this.RaisePropertyChanged("DocumentIdentificationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstNameTicketOwner {
            get {
                return this.FirstNameTicketOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameTicketOwnerField, value) != true)) {
                    this.FirstNameTicketOwnerField = value;
                    this.RaisePropertyChanged("FirstNameTicketOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastNameTicketOwner {
            get {
                return this.LastNameTicketOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameTicketOwnerField, value) != true)) {
                    this.LastNameTicketOwnerField = value;
                    this.RaisePropertyChanged("LastNameTicketOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerOperationService.ICustomerOperationService")]
    public interface ICustomerOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/GetAllBoostAccount", ReplyAction="http://tempuri.org/ICustomerOperationService/GetAllBoostAccountResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.BoostAccount>> GetAllBoostAccountAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/GetAllPurchaseTicket", ReplyAction="http://tempuri.org/ICustomerOperationService/GetAllPurchaseTicketResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.ExpandedPurchaseTicket>> GetAllPurchaseTicketAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/GetActivePurchaseTicket", ReplyAction="http://tempuri.org/ICustomerOperationService/GetActivePurchaseTicketResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.PurchaseTicket>> GetActivePurchaseTicketAsync(string userName, string password, string deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/GetAccountBallance", ReplyAction="http://tempuri.org/ICustomerOperationService/GetAccountBallanceResponse")]
        System.Threading.Tasks.Task<double> GetAccountBallanceAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/UpdateCustomerEmail", ReplyAction="http://tempuri.org/ICustomerOperationService/UpdateCustomerEmailResponse")]
        System.Threading.Tasks.Task UpdateCustomerEmailAsync(string userName, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/UpdateCustomerPassword", ReplyAction="http://tempuri.org/ICustomerOperationService/UpdateCustomerPasswordResponse")]
        System.Threading.Tasks.Task UpdateCustomerPasswordAsync(string userName, string password, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/CreateNewBoostAccount", ReplyAction="http://tempuri.org/ICustomerOperationService/CreateNewBoostAccountResponse")]
        System.Threading.Tasks.Task CreateNewBoostAccountAsync(string userName, string password, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOperationService/CreateNewPurchaseTicket", ReplyAction="http://tempuri.org/ICustomerOperationService/CreateNewPurchaseTicketResponse")]
        System.Threading.Tasks.Task CreateNewPurchaseTicketAsync(string userName, string password, Mobile.Helper.Services.CustomerOperationService.PurchaseTicket purchaseTicket, int howManyTickets);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerOperationServiceChannel : Mobile.Helper.Services.CustomerOperationService.ICustomerOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerOperationServiceClient : System.ServiceModel.ClientBase<Mobile.Helper.Services.CustomerOperationService.ICustomerOperationService>, Mobile.Helper.Services.CustomerOperationService.ICustomerOperationService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CustomerOperationServiceClient() : 
                base(CustomerOperationServiceClient.GetDefaultBinding(), CustomerOperationServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICustomerOperationService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerOperationServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CustomerOperationServiceClient.GetBindingForEndpoint(endpointConfiguration), CustomerOperationServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerOperationServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CustomerOperationServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerOperationServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CustomerOperationServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomerOperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.BoostAccount>> GetAllBoostAccountAsync(string userName, string password) {
            return base.Channel.GetAllBoostAccountAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.ExpandedPurchaseTicket>> GetAllPurchaseTicketAsync(string userName, string password) {
            return base.Channel.GetAllPurchaseTicketAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Mobile.Helper.Services.CustomerOperationService.PurchaseTicket>> GetActivePurchaseTicketAsync(string userName, string password, string deviceId) {
            return base.Channel.GetActivePurchaseTicketAsync(userName, password, deviceId);
        }
        
        public System.Threading.Tasks.Task<double> GetAccountBallanceAsync(string userName, string password) {
            return base.Channel.GetAccountBallanceAsync(userName, password);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerEmailAsync(string userName, string password, string email) {
            return base.Channel.UpdateCustomerEmailAsync(userName, password, email);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerPasswordAsync(string userName, string password, string newPassword) {
            return base.Channel.UpdateCustomerPasswordAsync(userName, password, newPassword);
        }
        
        public System.Threading.Tasks.Task CreateNewBoostAccountAsync(string userName, string password, string code) {
            return base.Channel.CreateNewBoostAccountAsync(userName, password, code);
        }
        
        public System.Threading.Tasks.Task CreateNewPurchaseTicketAsync(string userName, string password, Mobile.Helper.Services.CustomerOperationService.PurchaseTicket purchaseTicket, int howManyTickets) {
            return base.Channel.CreateNewPurchaseTicketAsync(userName, password, purchaseTicket, howManyTickets);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICustomerOperationService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICustomerOperationService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:24462/Services/CustomerOperationService.svc/basicHttp");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CustomerOperationServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICustomerOperationService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CustomerOperationServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICustomerOperationService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ICustomerOperationService,
        }
    }
}
